/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package QKART_SANITY_LOGIN.Module1;

import java.io.File;
import java.io.IOException;
import java.net.MalformedURLException;
import java.net.URL;
import java.util.Arrays;
import java.util.List;
import java.util.Set;
import java.util.concurrent.TimeUnit;
import java.util.stream.Collectors;
import org.apache.commons.io.FileUtils;
import org.openqa.selenium.By;
import org.openqa.selenium.JavascriptExecutor;
import org.openqa.selenium.OutputType;
import org.openqa.selenium.TakesScreenshot;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.WindowType;
import org.openqa.selenium.remote.BrowserType;
import org.openqa.selenium.remote.DesiredCapabilities;
import org.openqa.selenium.remote.RemoteWebDriver;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.WebDriverWait;

public class QkartSanity {

    public static String lastGeneratedUserName;


    public static RemoteWebDriver createDriver() throws MalformedURLException {
        final DesiredCapabilities capabilities = new DesiredCapabilities();
        capabilities.setBrowserName(BrowserType.CHROME);
        RemoteWebDriver driver =
                new RemoteWebDriver(new URL("http://localhost:8082/wd/hub"), capabilities);
        driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);

        return driver;
    }

    public static void logStatus(String type, String message, String status) {

        System.out.println(String.format("%s |  %s  |  %s | %s",
                String.valueOf(java.time.LocalDateTime.now()), type, message, status));
    }

    public static void takeScreenshot(WebDriver driver, String screenshotType, String description)
            throws IOException {
        // TODO: CRIO_TASK_MODULE_SYNCHRONISATION - Implement method using below steps
        /*
         * 1. Check if the folder "/screenshots" exists, create if it doesn't 2. Generate a unique
         * string using the timestamp 3. Capture screenshot 4. Save the screenshot inside the
         * "/screenshots" folder using the following naming convention:
         * screenshot_<Timestamp>_<ScreenshotType>_<Description>.png eg:
         * screenshot_2022-03-05T06:59:46.015489_StartTestcase_Testcase01.png
         */
        try {
            File folder = new File("/screenshots");
            if (!folder.exists()) {
                folder.mkdirs();
            }
            String timestamp = String.valueOf(java.time.LocalDateTime.now());
            String filename = String.format("screenshot_%s_%s_%s.png", timestamp, screenshotType,
                    description);
            File srcFile = ((TakesScreenshot) driver).getScreenshotAs(OutputType.FILE);
            FileUtils.copyFile(srcFile, new File("screenshots/" + filename));
        } catch (Exception e) {
            // TODO: handle exception
            e.printStackTrace();
        }
    }

    /*
     * Testcase01: Verify the functionality of Login button on the Home page
     */
    public static Boolean TestCase01(RemoteWebDriver driver)
            throws InterruptedException, IOException {
        Boolean status;
        takeScreenshot(driver, "startTestCase", "TestCase01");
        logStatus("Start TestCase", "Test Case 1: Verify User Registration", "DONE");

        // Visit the Registration page and register a new user
        Register registration = new Register(driver);
        registration.navigateToRegisterPage();
        status = registration.registerUser("testUser", "abc@123", true);
        if (!status) {
            logStatus("TestCase 1", "Test Case Pass. User Registration Pass", "FAIL");
            logStatus("End TestCase", "Test Case 1: Verify user Registration : ",
                    status ? "PASS" : "FAIL");
            takeScreenshot(driver, "TestCaseFaild", "TestCase01");
            // Return False as the test case Fails
            return false;
        } else {
            logStatus("TestCase 1", "Test Case Pass. User Registration Pass", "PASS");
        }

        // Save the last generated username
        lastGeneratedUserName = registration.lastGeneratedUsername;

        // Visit the login page and login with the previuosly registered user
        Login login = new Login(driver);
        login.navigateToLoginPage();
        status = login.PerformLogin(lastGeneratedUserName, "abc@123");
        logStatus("Test Step", "User Perform Login: ", status ? "PASS" : "FAIL");
        if (!status) {
            logStatus("End TestCase", "Test Case 1: Verify user Registration : ",
                    status ? "PASS" : "FAIL");
            takeScreenshot(driver, "TestCaseFaild", "TestCase01");
            return false;
        }

        // Visit the home page and log out the logged in user
        Home home = new Home(driver);
        status = home.PerformLogout();
        logStatus("End TestCase", "Test Case 1: Verify user Registration : ",
                status ? "PASS" : "FAIL");
        takeScreenshot(driver, "TestCaseResult", "TestCase01");
        return status;
    }

    /*
     * Verify that an existing user is not allowed to re-register on QKart
     */
    public static Boolean TestCase02(RemoteWebDriver driver)
            throws InterruptedException, IOException {
        Boolean status;
        takeScreenshot(driver, "startTestCase", "TestCase02");
        logStatus("Start Testcase",
                "Test Case 2: Verify User Registration with an existing username ", "DONE");
        Register registration = new Register(driver);
        registration.navigateToRegisterPage();
        status = registration.registerUser("testUser", "abc@123", true);
        logStatus("Test Step", "User Registration : ", status ? "PASS" : "FAIL");
        if (!status) {
            logStatus("End TestCase", "Test Case 2: Verify user Registration : ",
                    status ? "PASS" : "FAIL");
            takeScreenshot(driver, "TestCaseFaild", "TestCase02");
            return false;

        }
        lastGeneratedUserName = registration.lastGeneratedUsername;
        registration.navigateToRegisterPage();
        status = registration.registerUser(lastGeneratedUserName, "abc@123", false);
        logStatus("End TestCase", "Test Case 2: Verify user Registration : ",
                status ? "FAIL" : "PASS");
        takeScreenshot(driver, "TestCaseResult", "TestCase02");
        return !status;
    }

    /*
     * Verify the functinality of the search text box
     */
    public static Boolean TestCase03(RemoteWebDriver driver)
            throws InterruptedException, IOException {
        logStatus("TestCase 3", "Start test case : Verify functionality of search box ", "DONE");
        boolean status;
        Home homePage = new Home(driver);
        homePage.navigateToHome();
        takeScreenshot(driver, "startTestCase", "TestCase03");

        // SLEEP_STMT_01 : Wait for Page to Load
        // Thread.sleep(5000);
        status = homePage.searchForProduct("yonex");
        if (!status) {
            logStatus("TestCase 3", "Test Case Failure. Unable to search for given product",
                    "FAIL");
            return false;
        }
        List<WebElement> searchResults = homePage.getSearchResults();
        if (searchResults.size() == 0) {
            logStatus("TestCase 3",
                    "Test Case Failure. There were no results for the given search string", "FAIL");
            takeScreenshot(driver, "TestCaseFaild", "TestCase03");
            return false;
        }

        for (WebElement webElement : searchResults) {
            SearchResult resultelement = new SearchResult(webElement);
            String elementText = resultelement.getTitleofResult();
            if (!elementText.toUpperCase().contains("YONEX")) {
                logStatus("TestCase 3",
                        "Test Case Failure. Test Results contains un-expected values: "
                                + elementText,
                        "FAIL");
                takeScreenshot(driver, "TestCaseFaild", "TestCase03");
                return false;
            }
        }

        logStatus("Step Success", "Successfully validated the search results ", "PASS");
        status = homePage.searchForProduct("Gesundheit");

        if (!status) {
            logStatus("TestCase 3", "Test Case Failure. Unable to search for given product",
                    "FAIL");
            takeScreenshot(driver, "TestCaseFaild", "TestCase03");
            return false;
        }
        searchResults = homePage.getSearchResults();
        if (searchResults.size() == 0) {
            if (homePage.isNoResultFound()) {
                logStatus("Step Success",
                        "Successfully validated that no products found message is displayed",
                        "PASS");
            }
            logStatus("TestCase 3",
                    "Test Case PASS. Verified that no search results were found for the given text",
                    "PASS");
        } else {
            logStatus("TestCase 3",
                    "Test Case Fail. Expected: no results , actual: Results were available",
                    "FAIL");
            takeScreenshot(driver, "TestCaseFaild", "TestCase03");
            return false;
        }
        takeScreenshot(driver, "TestCaseResult", "TestCase03");

        return true;
    }

    /*
     * Verify the presence of size chart and check if the size chart content is as expected
     */
    public static Boolean TestCase04(RemoteWebDriver driver)
            throws InterruptedException, IOException {
        logStatus("TestCase 4", "Start test case : Verify the presence of size Chart", "DONE");
        boolean status = false;

        // Visit home page
        Home homePage = new Home(driver);
        homePage.navigateToHome();
        takeScreenshot(driver, "startTestCase", "TestCase04");
        status = homePage.searchForProduct("Running Shoes");
        List<WebElement> searchResults = homePage.getSearchResults();

        List<String> expectedTableHeaders = Arrays.asList("Size", "UK/INDIA", "EU", "HEEL TO TOE");
        List<List<String>> expectedTableBody = Arrays.asList(Arrays.asList("6", "6", "40", "9.8"),
                Arrays.asList("7", "7", "41", "10.2"), Arrays.asList("8", "8", "42", "10.6"),
                Arrays.asList("9", "9", "43", "11"), Arrays.asList("10", "10", "44", "11.5"),
                Arrays.asList("11", "11", "45", "12.2"), Arrays.asList("12", "12", "46", "12.6"));
        for (WebElement webElement : searchResults) {
            SearchResult result = new SearchResult(webElement);
            if (result.verifySizeChartExists()) {
                logStatus("Step Success", "Successfully validated presence of Size Chart Link",
                        "PASS");
                status = result.verifyExistenceofSizeDropdown(driver);
                logStatus("Step Success", "Validated presence of drop down",
                        status ? "PASS" : "FAIL");
                if (result.openSizechart()) {
                    // Verify if the size chart contents matches the expected values
                    if (result.validateSizeChartContents(expectedTableHeaders, expectedTableBody,
                            driver)) {
                        logStatus("Step Success",
                                "Successfully validated contents of Size Chart Link", "PASS");
                    } else {
                        logStatus("Step Failure",
                                "Failure while validating contents of Size Chart Link", "FAIL");
                                takeScreenshot(driver, "TestCaseFaild", "TestCase04");
                    }
                    status = result.closeSizeChart(driver);

                } else {
                    logStatus("TestCase 4", "Test Case Fail. Failure to open Size Chart", "FAIL");
                    return false;
                }

            } else {
                logStatus("TestCase 4", "Test Case Fail. Size Chart Link does not exist", "FAIL");
                takeScreenshot(driver, "TestCaseFaild", "TestCase04");
                return false;
            }
        }
        takeScreenshot(driver, "TestCaseResult", "TestCase04");
        logStatus("TestCase 4", "Test Case PASS. Validated Size Chart Details", "PASS");
        return status;
    }

    /*
     * Verify the complete flow of checking out and placing order for products is working correctly
     */
    public static Boolean TestCase05(RemoteWebDriver driver)
            throws InterruptedException, IOException {
        Boolean status;
        logStatus("Start TestCase", "Test Case 5: Verify Happy Flow of buying products", "DONE");
        Register registration = new Register(driver);
        registration.navigateToRegisterPage();
        takeScreenshot(driver, "startTestCase", "TestCase05");
        status = registration.registerUser("testUser", "abc@123", true);
        if (!status) {
            logStatus("TestCase 5", "Test Case Failure. Happy Flow Test Failed", "FAIL");
            takeScreenshot(driver, "TestCaseFaild", "TestCase05");
        }
        lastGeneratedUserName = registration.lastGeneratedUsername;
        Login login = new Login(driver);
        login.navigateToLoginPage();

        status = login.PerformLogin(lastGeneratedUserName, "abc@123");
        if (!status) {
            logStatus("Step Failure", "User Perform Login Failed", status ? "PASS" : "FAIL");
            logStatus("End TestCase", "Test Case 5: Happy Flow Test Failed : ",
                    status ? "PASS" : "FAIL");
                    takeScreenshot(driver, "TestCaseFaild", "TestCase05");
        }

        Home homePage = new Home(driver);
        homePage.navigateToHome();
        status = homePage.searchForProduct("Yonex");
        homePage.addProductToCart("YONEX Smash Badminton Racquet");
        status = homePage.searchForProduct("Tan");
        homePage.addProductToCart("Tan Leatherette Weekender Duffle");
        homePage.clickCheckout();

        Checkout checkoutPage = new Checkout(driver);
        checkoutPage.addNewAddress("Addr line 1 addr Line 2 addr line 3");
        checkoutPage.selectAddress("Addr line 1 addr Line 2 addr line 3");

        checkoutPage.placeOrder();
        WebDriverWait wait = new WebDriverWait(driver, 30);
        wait.until(ExpectedConditions.urlContains("/thanks"));

        status = driver.getCurrentUrl().endsWith("/thanks");

        homePage.navigateToHome();
        //Thread.sleep(3000);

        homePage.PerformLogout();
        takeScreenshot(driver, "TestCaseResult", "TestCase05");
        logStatus("End TestCase", "Test Case 5: Happy Flow Test Completed : ",
                status ? "PASS" : "FAIL");
        return status;
    }

    /*
     * Verify the quantity of items in cart can be updated
     */
    public static Boolean TestCase06(RemoteWebDriver driver)
            throws InterruptedException, IOException {
        Boolean status;
        logStatus("Start TestCase", "Test Case 6: Verify that cart can be edited", "DONE");
        Home homePage = new Home(driver);
        Register registration = new Register(driver);
        registration.navigateToRegisterPage();
        takeScreenshot(driver, "startTestCase", "TestCase06");
        status = registration.registerUser("testUser", "abc@123", true);
        if (!status) {
            logStatus("TestCase 6", "Test Case Failure. Happy Flow Test Failed", "FAIL");
        }

        lastGeneratedUserName = registration.lastGeneratedUsername;
        Login login = new Login(driver);
        login.navigateToLoginPage();
        status = login.PerformLogin(lastGeneratedUserName, "abc@123");
        if (!status) {
            logStatus("Step Failure", "User Perform Login Failed", status ? "PASS" : "FAIL");
            logStatus("End TestCase", "Test Case 6: Happy Flow Test Failed : ",
                    status ? "PASS" : "FAIL");
                    takeScreenshot(driver, "TestCaseFaild", "TestCase06");
        }
        homePage.navigateToHome();

        // TODO: CRIO_TASK_MODULE_TEST_AUTOMATION - TEST CASE 06: MILESTONE 5

        // TODO: Register a new user

        // TODO: Login using the newly registed user

        // TODO: Add "Xtend Smart Watch" to cart

        // TODO: Add "Yarine Floor Lamp" to cart

        homePage.searchForProduct("Xtend Smart Watch");
        homePage.addProductToCart("Xtend Smart Watch");
        homePage.searchForProduct("Yarine Floor Lamp");
        homePage.addProductToCart("Yarine Floor Lamp");
        homePage.changeProductQuantityinCart("Xtend Smart Watch", 2);
        homePage.changeProductQuantityinCart("Yarine Floor Lamp", 0);
        homePage.changeProductQuantityinCart("Xtend Smart Watch", 1);

        homePage.clickCheckout();

        Checkout checkoutPage = new Checkout(driver);
        checkoutPage.addNewAddress("Addr line 1 addr Line 2 addr line 3");
        checkoutPage.selectAddress("Addr line 1 addr Line 2 addr line 3");

        checkoutPage.placeOrder();
        WebDriverWait wait = new WebDriverWait(driver, 30);
        wait.until(ExpectedConditions.urlContains("/thanks"));
        //Thread.sleep(3000);

        status = driver.getCurrentUrl().endsWith("/thanks");

        homePage.navigateToHome();
        Thread.sleep(3000);
        homePage.PerformLogout();
        takeScreenshot(driver, "TestCaseResult", "TestCase06");
        logStatus("End TestCase", "Test Case 6: Verify that cart can be edited: ",
                status ? "PASS" : "FAIL");
        return status;
    }


    public static Boolean TestCase07(RemoteWebDriver driver)
            throws InterruptedException, IOException {
        Boolean status;
        logStatus("Start TestCase",
                "Test Case 7: Verify that insufficient balance error is thrown when the wallet balance is not enough",
                "DONE");

        Register registration = new Register(driver);
        registration.navigateToRegisterPage();
        takeScreenshot(driver, "startTestCase", "TestCase07");
        status = registration.registerUser("testUser", "abc@123", true);
        if (!status) {
            logStatus("Step Failure", "User Perform Registration Failed", status ? "PASS" : "FAIL");
            logStatus("End TestCase",
                    "Test Case 7: Verify that insufficient balance error is thrown when the wallet balance is not enough: ",
                    status ? "PASS" : "FAIL");
                    takeScreenshot(driver, "TestCaseFaild", "TestCase07");
            return false;
        }
        lastGeneratedUserName = registration.lastGeneratedUsername;

        Login login = new Login(driver);
        login.navigateToLoginPage();
        status = login.PerformLogin(lastGeneratedUserName, "abc@123");
        if (!status) {
            logStatus("Step Failure", "User Perform Login Failed", status ? "PASS" : "FAIL");
            logStatus("End TestCase",
                    "Test Case 7: Verify that insufficient balance error is thrown when the wallet balance is not enough: ",
                    status ? "PASS" : "FAIL");
                    takeScreenshot(driver, "TestCaseFaild", "TestCase07");
            return false;
        }

        Home homePage = new Home(driver);
        homePage.navigateToHome();
        status = homePage.searchForProduct("Stylecon");
        homePage.addProductToCart("Stylecon 9 Seater RHS Sofa Set");

        homePage.changeProductQuantityinCart("Stylecon 9 Seater RHS Sofa Set", 10);

        homePage.clickCheckout();

        Checkout checkoutPage = new Checkout(driver);
        checkoutPage.addNewAddress("Addr line 1 addr Line 2 addr line 3");
        checkoutPage.selectAddress("Addr line 1 addr Line 2 addr line 3");

        checkoutPage.placeOrder();
        Thread.sleep(3000);

        status = checkoutPage.verifyInsufficientBalanceMessage();
        takeScreenshot(driver, "TestCaseResult", "TestCase07");
        logStatus("End TestCase",
                "Test Case 7: Verify that insufficient balance error is thrown when the wallet balance is not enough: ",
                status ? "PASS" : "FAIL");

        return status;
    }

    public static Boolean TestCase08(RemoteWebDriver driver)
            throws InterruptedException, IOException {
        Boolean status;

        logStatus("Start TestCase", "Test Case 8: Multitab scenario", "DONE");


        Register registration = new Register(driver);
        registration.navigateToRegisterPage();
        takeScreenshot(driver, "startTestCase", "TestCase08");
        status = registration.registerUser("testUser", "abc@123", true);
        if (!status) {
            logStatus("Step Failure", "User Perform Registration Failed", status ? "PASS" : "FAIL");
            logStatus("End TestCase", "Test Case 8: Multitab scenario: ", status ? "PASS" : "FAIL");
            return false;
        }
        lastGeneratedUserName = registration.lastGeneratedUsername;

        Login login = new Login(driver);
        login.navigateToLoginPage();
        status = login.PerformLogin(lastGeneratedUserName, "abc@123");
        if (!status) {
            logStatus("Step Failure", "User Perform Login Failed", status ? "PASS" : "FAIL");
            logStatus("End TestCase", "Test Case 8: Multitab scenario: ", status ? "PASS" : "FAIL");
            takeScreenshot(driver, "TestCaseFaild", "TestCase08");
            return false;
        }

        Home homePage = new Home(driver);
        homePage.navigateToHome();
        status = homePage.searchForProduct("Yonex");
        homePage.addProductToCart("YONEX Smash Badminton Racquet");
        driver.switchTo().newWindow(WindowType.TAB);
        homePage.navigateToHome();
        // verify if same product is available in cart while opening in another tab.
        List<WebElement> cartsElements =
                driver.findElements(By.xpath("//div[@class = 'MuiBox-root css-1gjj37g']/div[1]"));
        List<String> cartProduct =
                cartsElements.stream().map(s -> s.getText()).collect(Collectors.toList());

        status = cartProduct.contains("YONEX Smash Badminton Racquet");

        takeScreenshot(driver, "TestCaseResult", "TestCase08");
        logStatus("End TestCase", "Test Case 8: Multitab scenario: ", status ? "PASS" : "FAIL");

        return status;
    }

    public static Boolean TestCase09(RemoteWebDriver driver)
            throws InterruptedException, IOException {

        // TODO: CRIO_TASK_MODULE_SYNCHRONISATION -
        Boolean status;
        logStatus("Start TestCase", "Test Case 9: Verify Privacy Policy and Terms of Service",
                "DONE");

        Home home = new Home(driver);
        home.navigateToHome();
        takeScreenshot(driver, "startTestCase", "TestCase09");


        WebElement privacyEle = driver.findElement(By.xpath("//a[text() = 'Privacy policy']"));
        scrollToView(privacyEle, driver);
        String parentWindowId = driver.getWindowHandle();
        String parentWindowUrl = driver.getCurrentUrl();
        privacyEle.click();
        status = driver.getCurrentUrl().equals(parentWindowUrl);
        if (!status) {
            logStatus("Step Failure", "Url of the parent page changed", status ? "PASS" : "FAIL");
            logStatus("End TestCase", "Test Case 9: Verify Privacy Policy and Terms of Service: ",
                    status ? "PASS" : "FAIL");
                    takeScreenshot(driver, "TestCaseFaild", "TestCase09");
            return false;
        }
        Set<String> windowsId = driver.getWindowHandles();
        for (String id : windowsId) {
            if (!id.equals(parentWindowId)) {
                driver.switchTo().window(id);
            }
        }
        String ppId = driver.getWindowHandle();
        // verify privacy policy text in newly opened tab
        WebElement ppText = driver.findElement(By.tagName("h2"));
        status = ppText.getText().equalsIgnoreCase("Privacy Policy");
        if (!status) {
            logStatus("Step Failure",
                    "Privacy Policy Text does not present in the newly opened tab",
                    status ? "PASS" : "FAIL");
            logStatus("End TestCase", "Test Case 9: Verify Privacy Policy and Terms of Service: ",
                    status ? "PASS" : "FAIL");
                    takeScreenshot(driver, "TestCaseFaild", "TestCase09");
            return false;
        }
        // driver.close();
        driver.switchTo().window(parentWindowId);
        WebElement termOfService = driver.findElement(By.xpath("//a[text() = 'Terms of Service']"));
        termOfService.click();
        status = driver.getCurrentUrl().equals(parentWindowUrl);
        if (!status) {
            logStatus("Step Failure", "Not get redirected", status ? "PASS" : "FAIL");
            logStatus("End TestCase", "Test Case 9: Terms of services failed in navigation",
                    status ? "PASS" : "FAIL");
                    takeScreenshot(driver, "TestCaseFaild", "TestCase09");
            return false;
        }
        windowsId = driver.getWindowHandles();
        for (String id : windowsId) {
            if (!id.equals(parentWindowId) && !id.equals(ppId)) {
                driver.switchTo().window(id);
            }
        }
        WebElement termOfServiceText = driver.findElement(By.tagName("h2"));
        status = termOfServiceText.getText().equalsIgnoreCase("Terms of Service");
        if (!status) {
            logStatus("Step Failure",
                    "Term Of Service Text does not present",
                    status ? "PASS" : "FAIL");
            logStatus("End TestCase", "Test Case 9: Terms and service text Verification failed: ",
                    status ? "PASS" : "FAIL");
                    takeScreenshot(driver, "TestCaseFaild", "TestCase10");
            return false;
        }

        driver.close();
        driver.switchTo().window(ppId).close();
        driver.switchTo().window(parentWindowId);

        takeScreenshot(driver, "TestCaseResult", "TestCase09");
        logStatus("End TestCase", "Test Case 9: Verify Privacy Policy and Terms of Service: ",
                status ? "PASS" : "FAIL");

        return status;
    }

    public static void scrollToView(WebElement element, RemoteWebDriver driver) {
        JavascriptExecutor scrolltobottom = (JavascriptExecutor) driver;
        scrolltobottom.executeScript("arguments[0].scrollIntoView();", element);
    }

    public static Boolean TestCase10(RemoteWebDriver driver)
            throws InterruptedException, IOException {
        Boolean status;
        logStatus("Start TestCase", "Test Case 10: Verify Contact us link works fine", "DONE");

        Home home = new Home(driver);
        home.navigateToHome();
        takeScreenshot(driver, "startTestCase", "TestCase10");
        WebElement contactUsBtn = driver.findElement(By.xpath("//p[text() = 'Contact us']"));
        contactUsBtn.click();
        WebElement name = driver.findElement(By.xpath("//input[@placeholder = 'Name']"));
        name.sendKeys("crio user");
        driver.findElement(By.xpath("//input[@placeholder = 'Email']"))
                .sendKeys("criouser@gmail.com");
        driver.findElement(By.xpath("//input[@placeholder = 'Message']"))
                .sendKeys("Testing the contact us page");
        driver.findElement(By.xpath(
                "//button[@class = 'btn btn-primary btn-md btn-block waves-effect text-center m-b-20']"))
                .click();
        try {
            WebDriverWait wait = new WebDriverWait(driver, 10);
            wait.until(ExpectedConditions.invisibilityOf(name));
            status = true;
        } catch (Exception e) {
            status = false;
        }
        takeScreenshot(driver, "TestCaseResult", "TestCase10");
        logStatus("End TestCase", "Test Case 10: Verify Contact us link works fine: ",
                status ? "PASS" : "FAIL");

        return status;
    }

    public static Boolean TestCase11(RemoteWebDriver driver)
            throws InterruptedException, IOException {
        Boolean status;
        logStatus("Start TestCase", "Test Case 11: Check for advertisements", "DONE");
        Register registration = new Register(driver);
        registration.navigateToRegisterPage();
        takeScreenshot(driver, "startTestCase", "TestCase11");
        status = registration.registerUser("testUser", "abc@123", true);
        if (!status) {
            logStatus("TestCase 11", "Test Case Failure. Check for advertisements", "FAIL");
            takeScreenshot(driver, "TestCaseFailed", "TestCase11");
            return false;
        }

        lastGeneratedUserName = registration.lastGeneratedUsername;
        Login login = new Login(driver);
        login.navigateToLoginPage();

        status = login.PerformLogin(lastGeneratedUserName, "abc@123");
        if (!status) {
            logStatus("Step Failure", "User Perform Login Failed", status ? "PASS" : "FAIL");
            logStatus("End TestCase", "Test Case 11: Check for advertisements : ",
                    status ? "PASS" : "FAIL");
                    takeScreenshot(driver, "TestCaseFaild", "TestCase11");
                    return false;
        }

        Home homePage = new Home(driver);
        homePage.navigateToHome();
        status = homePage.searchForProduct("Yonex");
        homePage.addProductToCart("YONEX Smash Badminton Racquet");

        homePage.clickCheckout();

        Checkout checkoutPage = new Checkout(driver);
        checkoutPage.addNewAddress("Addr line 1 addr Line 2 addr line 3");
        checkoutPage.selectAddress("Addr line 1 addr Line 2 addr line 3");

        checkoutPage.placeOrder();

        WebDriverWait wait = new WebDriverWait(driver, 30);
        wait.until(ExpectedConditions.urlContains("/thanks"));
        if (driver.findElements(By.xpath("//iframe")).size() == 3) {
            WebElement advertisement1 = driver.findElement(By.xpath("//iframe[1]"));
            driver.switchTo().frame(advertisement1);
            WebElement buyNow = driver.findElement(By.xpath("//button[text() = 'Buy Now']"));
            buyNow.click();

            WebDriverWait wait1 = new WebDriverWait(driver, 30);
            wait1.until(ExpectedConditions
                    .urlToBe("https://crio-qkart-frontend-qa.vercel.app/checkout"));
            if (!driver.getCurrentUrl()
                    .equals("https://crio-qkart-frontend-qa.vercel.app/checkout")) {
                logStatus("TestCase 11", "Test Case Failure. Check for advertisements", "FAIL");
                return false;
            }
            driver.navigate().back();
            driver.switchTo().parentFrame();

            WebElement advertisement2 = driver.findElement(By.xpath("//iframe[2]"));
            driver.switchTo().frame(advertisement2);
            driver.findElement(By.xpath("//button[text() = 'Buy Now']")).click();

            wait1.until(ExpectedConditions
                    .urlToBe("https://crio-qkart-frontend-qa.vercel.app/checkout"));
            if (!driver.getCurrentUrl()
                    .equals("https://crio-qkart-frontend-qa.vercel.app/checkout")) {
                logStatus("TestCase 11", "Test Case Failure. Check for advertisements", "FAIL");
                takeScreenshot(driver, "TestCaseFaild", "TestCase11");
                return false;
            }
            driver.navigate().back();
            driver.switchTo().parentFrame();
            status = true;
        } else {
            logStatus("TestCase 11", "Test Case Failure. Check for advertisements", "FAIL");
            takeScreenshot(driver, "TestCaseResult", "TestCase11");
            return false;
        }

        takeScreenshot(driver, "TestCaseResult", "TestCase11");
        logStatus("End TestCase", "Test Case 11: Check for advertisements: ",
                status ? "PASS" : "FAIL");
        return status;
    }

    public static void main(String[] args) throws Exception {
        int totalTests = 0;
        int passedTests = 0;
        Boolean status;
        // Maximize and Implicit Wait for things to initailize
        RemoteWebDriver driver = createDriver();
        driver.manage().window().maximize();
        driver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);

        try {
            // Execute Test Case 1
            totalTests += 1;
            status = TestCase01(driver);
            if (status) {
                passedTests += 1;
            }

            System.out.println("");

            // Execute Test Case 2
            totalTests += 1;
            status = TestCase02(driver);
            if (status) {
                passedTests += 1;
            }

            System.out.println("");
            // Execute Test Case 3
            totalTests += 1;
            status = TestCase03(driver);
            if (status) {
                passedTests += 1;
            }

            System.out.println("");

            // Execute Test Case 4
            totalTests += 1;
            status = TestCase04(driver);
            if (status) {
                passedTests += 1;
            }

            System.out.println("");

            // Execute Test Case 5
            totalTests += 1;
            status = TestCase05(driver);
            if (status) {
                passedTests += 1;
            }

            System.out.println("");

            // Execute Test Case 6
            totalTests += 1;
            status = TestCase06(driver);
            if (status) {
                passedTests += 1;
            }

            System.out.println("");

            // Execute Test Case 7
            totalTests += 1;
            status = TestCase07(driver);
            if (status) {
                passedTests += 1;
            }

            System.out.println("");


            // Execute Test Case 8
            totalTests += 1;
            status = TestCase08(driver);
            if (status) {
                passedTests += 1;
            }

            System.out.println("");

            // Execute Test Case 9
            totalTests += 1;
            status = TestCase09(driver);
            if (status) {
                passedTests += 1;
            }

            System.out.println("");

            // Execute Test Case 10
            totalTests += 1;
            status = TestCase10(driver);
            if (status) {
                passedTests += 1;
            }

            System.out.println("");

            // Execute Test Case 11
            totalTests += 1;
            status = TestCase11(driver);
            if (status) {
                passedTests += 1;
            }

            System.out.println("");
        } catch (Exception e) {
            throw e;
        } finally {
            // quit Chrome Driver
            driver.quit();

            System.out.println(String.format("%s out of %s test cases Passed ",
                    Integer.toString(passedTests), Integer.toString(totalTests)));
        }

    }
}
